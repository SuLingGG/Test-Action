#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Build Raspberry Pi 4 Lean's Minimal OpenWrt

on:
  repository_dispatch:
    types: [lean, rpi4]
  workflow_dispatch:
#  schedule:
#    - cron: 0 18 * * *
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: config/lean/bcm27xx/rpi4-lean-openwrt-minimal.config
  DEVICE: openwrt-bcm27xx-bcm2711-rpi-4
  DIY_SH: scripts/lean-openwrt.sh
  IPV6MOD_IN_FIRMWARE: false
  KMODS_IN_FIRMWARE: true
  UPLOAD_EXT4_IMAGES: true
  UPLOAD_SQUASHFS_IMAGES: true
  UPLOAD_ROOTFS: true
  UPLOAD_DL: true
  UPLOAD_WETRANSFER: true
  UPLOAD_COWTRANSFER: true
  TZ: Asia/Shanghai

jobs:
  Build:
    runs-on: ubuntu-18.04

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Initialization Environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(curl -fsSL git.io/depends-ubuntu-1804) tree
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"

    - name: Clone Source Code
      run: |
        df -hT $PWD
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update Feeds
      run: |
        cd openwrt
        echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
        ./scripts/feeds update -a

    - name: Install Feeds
      run: |
        cd $OPENWRTROOT
        ./scripts/feeds install -a

    - name: Load Custom Configuration
      run: |
        [ -e files ] && mv files $OPENWRTROOT/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE $OPENWRTROOT/.config
        chmod +x scripts/*.sh
        cd $OPENWRTROOT
        ../$DIY_SH
        ../scripts/preset-clash-core.sh armv8
        ../scripts/preset-terminal-tools.sh

    - name: Download Package
      id: package
      run: |
        cd $OPENWRTROOT
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            echo "CONFIG_ALL_KMODS=y" >> .config
        fi
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile Packages
      id: compile
      run: |
        cd $OPENWRTROOT
        echo -e "$(nproc) thread compile"
        make tools/compile -j$(nproc) || make tools/compile -j1 V=s
        make toolchain/compile -j$(nproc) || make toolchain/compile -j1 V=s
        make target/compile -j$(nproc) || make target/compile -j1 V=s IGNORE_ERRORS=1
        make diffconfig
        make package/compile -j$(nproc) IGNORE_ERRORS=1 || make package/compile -j1 V=s IGNORE_ERRORS=1
        make package/index
        cd $OPENWRTROOT/bin/packages/*
        PLATFORM=$(basename `pwd`)
        echo "PLATFORM=$PLATFORM" >> $GITHUB_ENV
        cd $OPENWRTROOT/bin/targets/*
        TARGET=$(basename `pwd`)
        echo "TARGET=$TARGET" >> $GITHUB_ENV
        cd *
        SUBTARGET=$(basename `pwd`)
        echo "SUBTARGET=$SUBTARGET" >> $GITHUB_ENV
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=COMPILE_STATUS::success"

    - name: Generate Firmware
      if: steps.compile.outputs.COMPILE_STATUS == 'success'
      id: generate
      run: |
        cd config/opkg
        sed -i "s/subtarget/$SUBTARGET/g" distfeeds*.conf
        sed -i "s/target\//$TARGET\//g" distfeeds*.conf
        sed -i "s/platform/$PLATFORM/g" distfeeds*.conf
        cd $OPENWRTROOT
        mkdir -p files/etc/opkg
        cp ../config/opkg/distfeeds-packages-server.conf files/etc/opkg/distfeeds.conf.server
        if "$KMODS_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/snapshots
            cp -r bin/targets files/www/snapshots
            cp ../config/opkg/distfeeds-18.06-local.conf files/etc/opkg/distfeeds.conf
        else
            cp ../config/opkg/distfeeds-18.06-remote.conf files/etc/opkg/distfeeds.conf
        fi
        if "$IPV6MOD_IN_FIRMWARE" = 'true'
        then
            mkdir -p files/www/ipv6-modules
            cp bin/packages/$PLATFORM/luci/luci-proto-ipv6* files/www/ipv6-modules
            cp bin/packages/$PLATFORM/base/{ipv6helper*,odhcpd-ipv6only*,odhcp6c*,6in4*} "files/www/ipv6-modules"
            cp bin/targets/$TARGET/$SUBTARGET/packages/{ip6tables*,kmod-nf-nat6*,kmod-ipt-nat6*,kmod-sit*,kmod-ip6tables-extra*} "files/www/ipv6-modules"
            mkdir -p files/bin
            cp ../scripts/ipv6-helper.sh files/bin/ipv6-helper
        fi
        make package/install -j$(nproc) || make package/install -j1 V=s
        make target/install -j$(nproc) || make target/install -j1 V=s
        make checksum
        echo "::set-output name=GENERATE_STATUS::success"
        echo "GENERATE_STATUS=success" >> $GITHUB_ENV

    - name: Store Variables
      uses: nick-invision/persist-action-data@v1
      with:
        data: ${{ env.OPENWRTROOT }}
        variable: OPENWRTROOT
        data: ${{ env.TARGET }}
        variable: TARGET
        data: ${{ env.SUBTARGET }}
        variable: SUBTARGET
        data: ${{ env.FIRMWARE }}
        variable: FIRMWARE
        data: ${{ env.GENERATE_STATUS }}
        variable: GENERATE_STATUS

    - name: Compress Folders
      run: |
        cd openwrt
        zip -qr bin-archive.zip bin
        zip -qr dl-archive.zip dl

    - name: Upload Bin Folder Archive
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: bin-archive
        path: openwrt/bin-archive.zip
        
    - name: Upload DL Folder Archive
      uses: actions/upload-artifact@main
      if: steps.generate.outputs.status == 'success'
      with:
        name: dl-archive
        path: openwrt/dl-archive.zip

  Upload:
    needs: [Build]
    
    runs-on: ubuntu-18.04
    
    steps:
      - name: Checkout
        uses: actions/checkout@main
        
      - name: Retrieve Variables
        uses: nick-invision/persist-action-data@v1
        with:
          retrieve_variables: OPENWRTROOT, TARGET, SUBTARGET, FIRMWARE, GENERATE_STATUS
        
      - name: Configure Rclone
        env:
          RCLONE_CONFIG: ${{ secrets.RCLONE_CONFIG }}
        if: env.GENERATE_STATUS == 'success'
        run: |
          mkdir openwrt
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          curl https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone/
          cat << EOF > ~/.config/rclone/rclone.conf
          $RCLONE_CONFIG
          EOF
          
      - name: Download Bin Folder Archive
        uses: actions/download-artifact@v2
        if: env.GENERATE_STATUS == 'success'
        with:
          name: bin-archive
          path: openwrt
          
      - name: Download DL Folder Archive
        uses: actions/download-artifact@v2
        if: env.GENERATE_STATUS == 'success'
        with:
          name: dl-archive
          path: openwrt

      - name: Upload Targets File To Rclone
        if: env.GENERATE_STATUS == 'success'
        run: |
          cd openwrt
          echo "OPENWRTROOT=$PWD" >> $GITHUB_ENV
          unzip -qo bin-archive.zip
          rm -f bin-archive.zip
          rclone copy bin ${{ secrets.RCLONE_REMOTE }}:$(date +"%Y-%m-%d")

      - name: Deploy Packages-Server
        if: env.GENERATE_STATUS == 'success'
        run: |
          mkdir -p server/web/snapshots/targets/$TARGET/$SUBTARGET
          cp -r $OPENWRTROOT/bin/packages server/web/snapshots
          cp -r $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/packages server/web/snapshots/targets/$TARGET/$SUBTARGET
          mkdir -p $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
          cp -r server $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET/pre-packages-server
          cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
          zip -q -r packages-server.zip pre-packages-server/server
          
      - name: Extract Gz Files
        if: env.GENERATE_STATUS == 'success'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
          gzip -qdc $DEVICE-squashfs-factory.img.gz > $DEVICE-squashfs-factory.img || true
          gzip -qdc $DEVICE-squashfs-sysupgrade.img.gz > $DEVICE-squashfs-sysupgrade.img || true
          gzip -qdc $DEVICE-ext4-factory.img.gz > $DEVICE-ext4-factory.img || true
          gzip -qdc $DEVICE-ext4-sysupgrade.img.gz > $DEVICE-ext4-sysupgrade.img || true
          
      - name: Generate Sha256sum File For Images
        if: env.GENERATE_STATUS == 'success'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
          mv sha256sums sha256sums.orig
          sha256sum *.img > sha256sums
          
      - name: Upload Config
        uses: actions/upload-artifact@main
        if: env.GENERATE_STATUS == 'success'
        with:
          name: config.buildinfo
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/config.buildinfo
          
      - name: Upload Packages-Server
        uses: actions/upload-artifact@main
        if: env.GENERATE_STATUS == 'success'
        with:
          name: packages-server
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/pre-packages-server
          
      - name: Upload Packages Info
        uses: actions/upload-artifact@main
        if: env.GENERATE_STATUS == 'success'
        with:
          name: ${{ env.DEVICE }}.manifest
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}.manifest
          
      - name: Upload RootFS Archive
        uses: actions/upload-artifact@main
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_ROOTFS == 'true'
        with:
          name: ${{ env.DEVICE }}-rootfs.tar.gz
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-rootfs.tar.gz
          
      - name: Upload SquashFS Factory Image
        uses: actions/upload-artifact@main
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_SQUASHFS_IMAGES == 'true'
        with:
          name: ${{ env.DEVICE }}-squashfs-factory.img
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-factory.img
          
      - name: Upload SquashFS Sysupgrade Image
        uses: actions/upload-artifact@main
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_SQUASHFS_IMAGES == 'true'
        with:
          name: ${{ env.DEVICE }}-squashfs-sysupgrade.img
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-squashfs-sysupgrade.img
          
      - name: Upload Ext4 Factory Image
        uses: actions/upload-artifact@main
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_EXT4_IMAGES == 'true'
        with:
          name: ${{ env.DEVICE }}-ext4-factory.img
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-factory.img
          
      - name: Upload Ext4 Sysupgrade Image
        uses: actions/upload-artifact@main
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_EXT4_IMAGES == 'true'
        with:
          name: ${{ env.DEVICE }}-ext4-sysupgrade.img
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/${{ env.DEVICE }}-ext4-sysupgrade.img

      - name: Upload Images Sha256sums
        uses: actions/upload-artifact@main
        if: env.GENERATE_STATUS == 'success'
        with:
          name: sha256sums
          path: openwrt/bin/targets/${{ env.TARGET }}/${{ env.SUBTARGET }}/sha256sums

      - name: Organize Files
        id: organize
        if: env.GENERATE_STATUS == 'success'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/$SUBTARGET
          rm -rf *.img packages pre-packages-server sha256sums
          mv sha256sums.orig sha256sums
          tree -L 1
          cd $OPENWRTROOT/bin/targets/$TARGET/
          curl -fsSL git.io/file-transfer | sh
          df -hT $PWD
          echo "::set-output name=status::success"

      - name: Upload Firmware To CowTransfer
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_COWTRANSFER == 'true'
        run: |
          mv $OPENWRTROOT/dl-archive $OPENWRTROOT/DL.zip
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
          echo "::warning file=Firmware-Cowtransfer.com::$(cat cowtransfer.log | grep https)"

      - name: Upload Firmware To WeTransfer
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_WETRANSFER == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
          echo "::warning file=Firmware-Wetransfer.com::$(cat wetransfer.log | grep https)"

      - name: Upload DL To CowTransfer
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_DL == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer cow --block 2621440 -s -p 64 --no-progress ${OPENWRTROOT}/DL.zip 2>&1 | tee cowtransfer-dl.log
          
      - name: Upload DL To WeTransfer
        if: env.GENERATE_STATUS == 'success' && env.UPLOAD_DL == 'true'
        run: |
          cd $OPENWRTROOT/bin/targets/$TARGET/
          ./transfer wet -s -p 16 --no-progress ${OPENWRTROOT}/DL.zip 2>&1 | tee wetransfer-dl.log

